/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { WButtonColor, WButtonSize } from "./components/w-button/types";
import { IconName } from "./components/w-icon/types";
import { CertificateButtonShape } from "./components/w-certificate-button/w-certificate-button";
import { CertificateTextButtonIcon } from "./components/w-certificate-button/components/CertificateTextButton";
import { CertificateV4Strings } from "./i18n";
import { WPContent } from "./utils/certificate-data";
import { DateTimeOption } from "./components/w-date-time-select/w-date-time-select";
import { getButtonTextFunction } from "./components/w-date-time-select/components/OpenButton";
import { VNode } from "@stencil/core";
import { DropdownMenuOption } from "./components/w-dropdown-menu/w-dropdown-menu";
import { DateTimeOption as DateTimeOption1 } from "./components/w-date-time-select/w-date-time-select";
import { Route } from "./components/w-router-outlet";
import { ContentPreviewType } from "./utils/content-preview";
export namespace Components {
    interface WBadge {
        /**
          * color variant
         */
        "color": string;
        /**
          * size
         */
        "size": string;
    }
    interface WButton {
        /**
          * adds an icon with the corresponding name after button content
         */
        "appendIcon": IconName;
        /**
          * button color
         */
        "color": WButtonColor;
        /**
          * button html "disabled" attribute
         */
        "disabled": boolean;
        /**
          * opens an url on click (make button work as a link)
         */
        "href": string;
        /**
          * button html "type" attribute
         */
        "icon": IconName;
        /**
          * show spinner
         */
        "loading": boolean;
        /**
          * renders button as underlined text
         */
        "outline": boolean;
        /**
          * adds an icon with the corresponding name before button content
         */
        "prependIcon": IconName;
        /**
          * button text size
         */
        "size": WButtonSize;
        /**
          * name of the browsing context, defaults to '_blank' (specify '_self' to open url in the same tab)
         */
        "target": string;
        /**
          * renders button as underlined text
         */
        "text": boolean;
        /**
          * button html "type" attribute
         */
        "type": string;
        /**
          * underline decoration for text button
         */
        "underlineNone": boolean;
    }
    interface WCard {
        /**
          * widt of the card
         */
        "size": 'base' | 'lg';
    }
    interface WCertificate {
        /**
          * Enables debug information logging to the console.
         */
        "debug": boolean;
        /**
          * Add Identity name.
         */
        "identityName": string;
        /**
          * Add Identity profile picture.
         */
        "identityProfilePicture": string;
        /**
          * Add Identity proof url.
         */
        "identityProofUrl": string;
        /**
          * Add Identity provider.
         */
        "identityProvider": string;
        /**
          * The datetime the post was last modified. Used to show the visitor if the post is edited after the last timestamp. This is a visual notice, not a security feature.
         */
        "lastModified": string;
        /**
          * Change the certificate link text.
         */
        "linkText": string;
        /**
          * Hides the icon on certificate link.
         */
        "noIcon": boolean;
        /**
          * Enables debug information logging to the console.
         */
        "placeholder": string;
        /**
          * Render without button inside, if a button is used outside this element.
         */
        "renderWithoutButton": boolean;
        /**
          * Specify shared identifier to allow pages with multiple certificates.
         */
        "sharedIdentifier": string;
        /**
          * Determines if revisions are shown in the certificate.
         */
        "showRevisions": string | boolean;
    }
    interface WCertificateButton {
        /**
          * Specify the color of the icon and tet.
         */
        "color": string;
        /**
          * Change the icon of the button.
         */
        "icon": CertificateTextButtonIcon;
        /**
          * Specify the shape of the button ('box' | 'text' | 'pill')
         */
        "shape": CertificateButtonShape | '';
        /**
          * Specify shared identifier to allow pages with multiple certificates.
         */
        "sharedIdentifier": string;
        /**
          * Specify the text on the button, if not specified defaults to 'View this content's Timestamp certificate'
         */
        "text": string;
        /**
          * Specify the variant used.
         */
        "variant": string;
    }
    interface WCertificateLink {
        /**
          * custom certificate link text
         */
        "linkText": string;
        /**
          * hides icon
         */
        "noIcon": boolean;
    }
    interface WCompareVersionsView {
        "content": WPContent;
        "locale": string;
        "strings": CertificateV4Strings;
        "timestampCheckUrl": string;
        "to": number;
        "view": string;
        "viewBlockchainUrl": string;
        "which": number;
    }
    interface WDateTimeSelect {
        /**
          * optional: returns a string displayed on the button openong the dropdown
         */
        "getButtonText": getButtonTextFunction;
        /**
          * by default the date picker opens to the bottom of the trigger elemnt if set to true opens it to the top
         */
        "openToTop": boolean;
        /**
          * on array of Date objects to select from
         */
        "options": DateTimeOption[];
        /**
          * index of the selected DateTimeOption
         */
        "selected": number | null;
    }
    interface WDropdownMenu {
        /**
          * Array of menu items options
         */
        "options": DropdownMenuOption[];
    }
    interface WIcon {
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit": boolean;
        /**
          * renders the icon with corresponding name
         */
        "name": IconName;
    }
    interface WInputCheckbox {
        /**
          * form element checked property
         */
        "checked": boolean;
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * form error message
         */
        "error": string;
    }
    interface WInputDate {
        "openToTop": boolean;
        /**
          * value, date as a string in "YYYY-MM-DD" format
         */
        "value": string;
    }
    interface WInputSelect {
        /**
          * disabled
         */
        "disabled": boolean;
        /**
          * form element error message
         */
        "error": string;
        /**
          * label
         */
        "label": string;
        /**
          * placeholder (shown as select's value if no value provided or provided value is not found among options' values)
         */
        "placeholder": string;
        /**
          * value
         */
        "value": string;
    }
    interface WInputSelectOption {
    }
    interface WInputText {
        /**
          * input html tag "autocomplete" attribute, defaults to ""
         */
        "autocomplete": string;
        /**
          * input html tag "autofocus" attribute, defaults to "false"
         */
        "autofocus": boolean;
        /**
          * error message displayed in the form group, defaults to ""
         */
        "error": string;
        /**
          * input html tag "inputmode" attribute, defaults to ""
         */
        "inputmode": string;
        /**
          * label for the form group, defaults to ""
         */
        "label": string;
        /**
          * input html tag "placeholder" attribute, if not set defaults to "label" prop value
         */
        "placeholder": string;
        /**
          * input html tag "required" attribute, defaults to "false"
         */
        "required": boolean;
        /**
          * a regex string (new RegExp is creted from this string) that is stripped from input value (replaced with an empty string) could be used to strip protocol and route from an URL to get website name for example strip="^http[s]?:\/\/" will strip out the protocol from an URL and strip="^http[s]?:\/\/|\/$|\.examplemaindomain.com.*" will leave subdomain value only. combined with suffix=".examplemaindomain.com" will allow to get website name without protocol and any route, query etc.
         */
        "strip": string;
        /**
          * a string displayed inside input form field group as appended label and added to visible input value could be used to get from user an URL in a specific domain for example somesubdomain[.examplemaindomain.com]
         */
        "suffix": string;
        /**
          * input html tag "type" attribute, defaults to "text"
         */
        "type": string;
        /**
          * value, defaults to ""
         */
        "value": string;
    }
    interface WLogo {
        /**
          * sets the logo colors to blue on white
         */
        "blueOnWhite": boolean;
        /**
          * shows "WordProof" in blue and teal
         */
        "doubleColored": boolean;
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit": boolean;
        /**
          * sets the logo colors to blue on white
         */
        "tealOnWhite": boolean;
        /**
          * adds "WordProof" text to logo
         */
        "text": boolean;
        /**
          * render large logo text
         */
        "textLarge": boolean;
        /**
          * sets the logo colors to blue on white
         */
        "whiteOnBlue": boolean;
    }
    interface WModal {
        /**
          * class names added to content wrapper element of the modal
         */
        "ariaModalDescription": string;
        /**
          * class names added to content wrapper element of the modal
         */
        "ariaModalTitle": string;
        /**
          * class names added to backdrop element of the modal
         */
        "backdropClassName": string;
        /**
          * class names added to content wrapper element of the modal
         */
        "contentClassName": string;
        /**
          * class names added to modal element of the modal
         */
        "modalClassName": string;
        /**
          * controls visibility of the modal
         */
        "rounded": 'sm' | 'md' | 'lg' | boolean;
        /**
          * controls visibility of the modal
         */
        "visible": boolean;
        /**
          * class names added to wrapper element of the modal
         */
        "wrapClassName": string;
    }
    interface WRevisionSelect {
        /**
          * revision date time options
         */
        "options": DateTimeOption1[];
        /**
          * selected option index
         */
        "selected": number | null;
    }
    interface WRouterOutlet {
        "routes": Route[];
        "showRevisions": boolean;
    }
    interface WSerpCertificate {
        /**
          * date string when content was first timestamped
         */
        "firstTimestamped": string;
        /**
          * date string when content was last edited
         */
        "lastEdited": string;
        /**
          * name of an individual or company that published the content
         */
        "publishedBy": string;
    }
    interface WVersionView {
        "content": WPContent;
        "locale": string;
        "revision": number;
        "showRevisions": boolean;
        "strings": CertificateV4Strings;
        "timestampCheckUrl": string;
        "view": Exclude<ContentPreviewType, 'diff'>;
        "viewBlockchainUrl": string;
    }
}
export interface WModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWModalElement;
}
declare global {
    interface HTMLWBadgeElement extends Components.WBadge, HTMLStencilElement {
    }
    var HTMLWBadgeElement: {
        prototype: HTMLWBadgeElement;
        new (): HTMLWBadgeElement;
    };
    interface HTMLWButtonElement extends Components.WButton, HTMLStencilElement {
    }
    var HTMLWButtonElement: {
        prototype: HTMLWButtonElement;
        new (): HTMLWButtonElement;
    };
    interface HTMLWCardElement extends Components.WCard, HTMLStencilElement {
    }
    var HTMLWCardElement: {
        prototype: HTMLWCardElement;
        new (): HTMLWCardElement;
    };
    interface HTMLWCertificateElement extends Components.WCertificate, HTMLStencilElement {
    }
    var HTMLWCertificateElement: {
        prototype: HTMLWCertificateElement;
        new (): HTMLWCertificateElement;
    };
    interface HTMLWCertificateButtonElement extends Components.WCertificateButton, HTMLStencilElement {
    }
    var HTMLWCertificateButtonElement: {
        prototype: HTMLWCertificateButtonElement;
        new (): HTMLWCertificateButtonElement;
    };
    interface HTMLWCertificateLinkElement extends Components.WCertificateLink, HTMLStencilElement {
    }
    var HTMLWCertificateLinkElement: {
        prototype: HTMLWCertificateLinkElement;
        new (): HTMLWCertificateLinkElement;
    };
    interface HTMLWCompareVersionsViewElement extends Components.WCompareVersionsView, HTMLStencilElement {
    }
    var HTMLWCompareVersionsViewElement: {
        prototype: HTMLWCompareVersionsViewElement;
        new (): HTMLWCompareVersionsViewElement;
    };
    interface HTMLWDateTimeSelectElement extends Components.WDateTimeSelect, HTMLStencilElement {
    }
    var HTMLWDateTimeSelectElement: {
        prototype: HTMLWDateTimeSelectElement;
        new (): HTMLWDateTimeSelectElement;
    };
    interface HTMLWDropdownMenuElement extends Components.WDropdownMenu, HTMLStencilElement {
    }
    var HTMLWDropdownMenuElement: {
        prototype: HTMLWDropdownMenuElement;
        new (): HTMLWDropdownMenuElement;
    };
    interface HTMLWIconElement extends Components.WIcon, HTMLStencilElement {
    }
    var HTMLWIconElement: {
        prototype: HTMLWIconElement;
        new (): HTMLWIconElement;
    };
    interface HTMLWInputCheckboxElement extends Components.WInputCheckbox, HTMLStencilElement {
    }
    var HTMLWInputCheckboxElement: {
        prototype: HTMLWInputCheckboxElement;
        new (): HTMLWInputCheckboxElement;
    };
    interface HTMLWInputDateElement extends Components.WInputDate, HTMLStencilElement {
    }
    var HTMLWInputDateElement: {
        prototype: HTMLWInputDateElement;
        new (): HTMLWInputDateElement;
    };
    interface HTMLWInputSelectElement extends Components.WInputSelect, HTMLStencilElement {
    }
    var HTMLWInputSelectElement: {
        prototype: HTMLWInputSelectElement;
        new (): HTMLWInputSelectElement;
    };
    interface HTMLWInputSelectOptionElement extends Components.WInputSelectOption, HTMLStencilElement {
    }
    var HTMLWInputSelectOptionElement: {
        prototype: HTMLWInputSelectOptionElement;
        new (): HTMLWInputSelectOptionElement;
    };
    interface HTMLWInputTextElement extends Components.WInputText, HTMLStencilElement {
    }
    var HTMLWInputTextElement: {
        prototype: HTMLWInputTextElement;
        new (): HTMLWInputTextElement;
    };
    interface HTMLWLogoElement extends Components.WLogo, HTMLStencilElement {
    }
    var HTMLWLogoElement: {
        prototype: HTMLWLogoElement;
        new (): HTMLWLogoElement;
    };
    interface HTMLWModalElement extends Components.WModal, HTMLStencilElement {
    }
    var HTMLWModalElement: {
        prototype: HTMLWModalElement;
        new (): HTMLWModalElement;
    };
    interface HTMLWRevisionSelectElement extends Components.WRevisionSelect, HTMLStencilElement {
    }
    var HTMLWRevisionSelectElement: {
        prototype: HTMLWRevisionSelectElement;
        new (): HTMLWRevisionSelectElement;
    };
    interface HTMLWRouterOutletElement extends Components.WRouterOutlet, HTMLStencilElement {
    }
    var HTMLWRouterOutletElement: {
        prototype: HTMLWRouterOutletElement;
        new (): HTMLWRouterOutletElement;
    };
    interface HTMLWSerpCertificateElement extends Components.WSerpCertificate, HTMLStencilElement {
    }
    var HTMLWSerpCertificateElement: {
        prototype: HTMLWSerpCertificateElement;
        new (): HTMLWSerpCertificateElement;
    };
    interface HTMLWVersionViewElement extends Components.WVersionView, HTMLStencilElement {
    }
    var HTMLWVersionViewElement: {
        prototype: HTMLWVersionViewElement;
        new (): HTMLWVersionViewElement;
    };
    interface HTMLElementTagNameMap {
        "w-badge": HTMLWBadgeElement;
        "w-button": HTMLWButtonElement;
        "w-card": HTMLWCardElement;
        "w-certificate": HTMLWCertificateElement;
        "w-certificate-button": HTMLWCertificateButtonElement;
        "w-certificate-link": HTMLWCertificateLinkElement;
        "w-compare-versions-view": HTMLWCompareVersionsViewElement;
        "w-date-time-select": HTMLWDateTimeSelectElement;
        "w-dropdown-menu": HTMLWDropdownMenuElement;
        "w-icon": HTMLWIconElement;
        "w-input-checkbox": HTMLWInputCheckboxElement;
        "w-input-date": HTMLWInputDateElement;
        "w-input-select": HTMLWInputSelectElement;
        "w-input-select-option": HTMLWInputSelectOptionElement;
        "w-input-text": HTMLWInputTextElement;
        "w-logo": HTMLWLogoElement;
        "w-modal": HTMLWModalElement;
        "w-revision-select": HTMLWRevisionSelectElement;
        "w-router-outlet": HTMLWRouterOutletElement;
        "w-serp-certificate": HTMLWSerpCertificateElement;
        "w-version-view": HTMLWVersionViewElement;
    }
}
declare namespace LocalJSX {
    interface WBadge {
        /**
          * color variant
         */
        "color"?: string;
        /**
          * size
         */
        "size"?: string;
    }
    interface WButton {
        /**
          * adds an icon with the corresponding name after button content
         */
        "appendIcon"?: IconName;
        /**
          * button color
         */
        "color"?: WButtonColor;
        /**
          * button html "disabled" attribute
         */
        "disabled"?: boolean;
        /**
          * opens an url on click (make button work as a link)
         */
        "href"?: string;
        /**
          * button html "type" attribute
         */
        "icon"?: IconName;
        /**
          * show spinner
         */
        "loading"?: boolean;
        /**
          * renders button as underlined text
         */
        "outline"?: boolean;
        /**
          * adds an icon with the corresponding name before button content
         */
        "prependIcon"?: IconName;
        /**
          * button text size
         */
        "size"?: WButtonSize;
        /**
          * name of the browsing context, defaults to '_blank' (specify '_self' to open url in the same tab)
         */
        "target"?: string;
        /**
          * renders button as underlined text
         */
        "text"?: boolean;
        /**
          * button html "type" attribute
         */
        "type"?: string;
        /**
          * underline decoration for text button
         */
        "underlineNone"?: boolean;
    }
    interface WCard {
        /**
          * widt of the card
         */
        "size"?: 'base' | 'lg';
    }
    interface WCertificate {
        /**
          * Enables debug information logging to the console.
         */
        "debug"?: boolean;
        /**
          * Add Identity name.
         */
        "identityName"?: string;
        /**
          * Add Identity profile picture.
         */
        "identityProfilePicture"?: string;
        /**
          * Add Identity proof url.
         */
        "identityProofUrl"?: string;
        /**
          * Add Identity provider.
         */
        "identityProvider"?: string;
        /**
          * The datetime the post was last modified. Used to show the visitor if the post is edited after the last timestamp. This is a visual notice, not a security feature.
         */
        "lastModified"?: string;
        /**
          * Change the certificate link text.
         */
        "linkText"?: string;
        /**
          * Hides the icon on certificate link.
         */
        "noIcon"?: boolean;
        /**
          * Enables debug information logging to the console.
         */
        "placeholder"?: string;
        /**
          * Render without button inside, if a button is used outside this element.
         */
        "renderWithoutButton"?: boolean;
        /**
          * Specify shared identifier to allow pages with multiple certificates.
         */
        "sharedIdentifier"?: string;
        /**
          * Determines if revisions are shown in the certificate.
         */
        "showRevisions"?: string | boolean;
    }
    interface WCertificateButton {
        /**
          * Specify the color of the icon and tet.
         */
        "color"?: string;
        /**
          * Change the icon of the button.
         */
        "icon"?: CertificateTextButtonIcon;
        /**
          * Specify the shape of the button ('box' | 'text' | 'pill')
         */
        "shape"?: CertificateButtonShape | '';
        /**
          * Specify shared identifier to allow pages with multiple certificates.
         */
        "sharedIdentifier"?: string;
        /**
          * Specify the text on the button, if not specified defaults to 'View this content's Timestamp certificate'
         */
        "text"?: string;
        /**
          * Specify the variant used.
         */
        "variant"?: string;
    }
    interface WCertificateLink {
        /**
          * custom certificate link text
         */
        "linkText"?: string;
        /**
          * hides icon
         */
        "noIcon"?: boolean;
    }
    interface WCompareVersionsView {
        "content"?: WPContent;
        "locale"?: string;
        "strings"?: CertificateV4Strings;
        "timestampCheckUrl"?: string;
        "to"?: number;
        "view"?: string;
        "viewBlockchainUrl"?: string;
        "which"?: number;
    }
    interface WDateTimeSelect {
        /**
          * optional: returns a string displayed on the button openong the dropdown
         */
        "getButtonText"?: getButtonTextFunction;
        /**
          * by default the date picker opens to the bottom of the trigger elemnt if set to true opens it to the top
         */
        "openToTop"?: boolean;
        /**
          * on array of Date objects to select from
         */
        "options"?: DateTimeOption[];
        /**
          * index of the selected DateTimeOption
         */
        "selected"?: number | null;
    }
    interface WDropdownMenu {
        /**
          * Array of menu items options
         */
        "options"?: DropdownMenuOption[];
    }
    interface WIcon {
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit"?: boolean;
        /**
          * renders the icon with corresponding name
         */
        "name"?: IconName;
    }
    interface WInputCheckbox {
        /**
          * form element checked property
         */
        "checked"?: boolean;
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * form error message
         */
        "error"?: string;
    }
    interface WInputDate {
        "openToTop"?: boolean;
        /**
          * value, date as a string in "YYYY-MM-DD" format
         */
        "value"?: string;
    }
    interface WInputSelect {
        /**
          * disabled
         */
        "disabled"?: boolean;
        /**
          * form element error message
         */
        "error"?: string;
        /**
          * label
         */
        "label"?: string;
        /**
          * placeholder (shown as select's value if no value provided or provided value is not found among options' values)
         */
        "placeholder"?: string;
        /**
          * value
         */
        "value"?: string;
    }
    interface WInputSelectOption {
    }
    interface WInputText {
        /**
          * input html tag "autocomplete" attribute, defaults to ""
         */
        "autocomplete"?: string;
        /**
          * input html tag "autofocus" attribute, defaults to "false"
         */
        "autofocus"?: boolean;
        /**
          * error message displayed in the form group, defaults to ""
         */
        "error"?: string;
        /**
          * input html tag "inputmode" attribute, defaults to ""
         */
        "inputmode"?: string;
        /**
          * label for the form group, defaults to ""
         */
        "label"?: string;
        /**
          * input html tag "placeholder" attribute, if not set defaults to "label" prop value
         */
        "placeholder"?: string;
        /**
          * input html tag "required" attribute, defaults to "false"
         */
        "required"?: boolean;
        /**
          * a regex string (new RegExp is creted from this string) that is stripped from input value (replaced with an empty string) could be used to strip protocol and route from an URL to get website name for example strip="^http[s]?:\/\/" will strip out the protocol from an URL and strip="^http[s]?:\/\/|\/$|\.examplemaindomain.com.*" will leave subdomain value only. combined with suffix=".examplemaindomain.com" will allow to get website name without protocol and any route, query etc.
         */
        "strip"?: string;
        /**
          * a string displayed inside input form field group as appended label and added to visible input value could be used to get from user an URL in a specific domain for example somesubdomain[.examplemaindomain.com]
         */
        "suffix"?: string;
        /**
          * input html tag "type" attribute, defaults to "text"
         */
        "type"?: string;
        /**
          * value, defaults to ""
         */
        "value"?: string;
    }
    interface WLogo {
        /**
          * sets the logo colors to blue on white
         */
        "blueOnWhite"?: boolean;
        /**
          * shows "WordProof" in blue and teal
         */
        "doubleColored"?: boolean;
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit"?: boolean;
        /**
          * sets the logo colors to blue on white
         */
        "tealOnWhite"?: boolean;
        /**
          * adds "WordProof" text to logo
         */
        "text"?: boolean;
        /**
          * render large logo text
         */
        "textLarge"?: boolean;
        /**
          * sets the logo colors to blue on white
         */
        "whiteOnBlue"?: boolean;
    }
    interface WModal {
        /**
          * class names added to content wrapper element of the modal
         */
        "ariaModalDescription"?: string;
        /**
          * class names added to content wrapper element of the modal
         */
        "ariaModalTitle"?: string;
        /**
          * class names added to backdrop element of the modal
         */
        "backdropClassName"?: string;
        /**
          * class names added to content wrapper element of the modal
         */
        "contentClassName"?: string;
        /**
          * class names added to modal element of the modal
         */
        "modalClassName"?: string;
        "onClose"?: (event: WModalCustomEvent<any>) => void;
        /**
          * controls visibility of the modal
         */
        "rounded"?: 'sm' | 'md' | 'lg' | boolean;
        /**
          * controls visibility of the modal
         */
        "visible"?: boolean;
        /**
          * class names added to wrapper element of the modal
         */
        "wrapClassName"?: string;
    }
    interface WRevisionSelect {
        /**
          * revision date time options
         */
        "options"?: DateTimeOption1[];
        /**
          * selected option index
         */
        "selected"?: number | null;
    }
    interface WRouterOutlet {
        "routes"?: Route[];
        "showRevisions"?: boolean;
    }
    interface WSerpCertificate {
        /**
          * date string when content was first timestamped
         */
        "firstTimestamped"?: string;
        /**
          * date string when content was last edited
         */
        "lastEdited"?: string;
        /**
          * name of an individual or company that published the content
         */
        "publishedBy"?: string;
    }
    interface WVersionView {
        "content"?: WPContent;
        "locale"?: string;
        "revision"?: number;
        "showRevisions"?: boolean;
        "strings"?: CertificateV4Strings;
        "timestampCheckUrl"?: string;
        "view"?: Exclude<ContentPreviewType, 'diff'>;
        "viewBlockchainUrl"?: string;
    }
    interface IntrinsicElements {
        "w-badge": WBadge;
        "w-button": WButton;
        "w-card": WCard;
        "w-certificate": WCertificate;
        "w-certificate-button": WCertificateButton;
        "w-certificate-link": WCertificateLink;
        "w-compare-versions-view": WCompareVersionsView;
        "w-date-time-select": WDateTimeSelect;
        "w-dropdown-menu": WDropdownMenu;
        "w-icon": WIcon;
        "w-input-checkbox": WInputCheckbox;
        "w-input-date": WInputDate;
        "w-input-select": WInputSelect;
        "w-input-select-option": WInputSelectOption;
        "w-input-text": WInputText;
        "w-logo": WLogo;
        "w-modal": WModal;
        "w-revision-select": WRevisionSelect;
        "w-router-outlet": WRouterOutlet;
        "w-serp-certificate": WSerpCertificate;
        "w-version-view": WVersionView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "w-badge": LocalJSX.WBadge & JSXBase.HTMLAttributes<HTMLWBadgeElement>;
            "w-button": LocalJSX.WButton & JSXBase.HTMLAttributes<HTMLWButtonElement>;
            "w-card": LocalJSX.WCard & JSXBase.HTMLAttributes<HTMLWCardElement>;
            "w-certificate": LocalJSX.WCertificate & JSXBase.HTMLAttributes<HTMLWCertificateElement>;
            "w-certificate-button": LocalJSX.WCertificateButton & JSXBase.HTMLAttributes<HTMLWCertificateButtonElement>;
            "w-certificate-link": LocalJSX.WCertificateLink & JSXBase.HTMLAttributes<HTMLWCertificateLinkElement>;
            "w-compare-versions-view": LocalJSX.WCompareVersionsView & JSXBase.HTMLAttributes<HTMLWCompareVersionsViewElement>;
            "w-date-time-select": LocalJSX.WDateTimeSelect & JSXBase.HTMLAttributes<HTMLWDateTimeSelectElement>;
            "w-dropdown-menu": LocalJSX.WDropdownMenu & JSXBase.HTMLAttributes<HTMLWDropdownMenuElement>;
            "w-icon": LocalJSX.WIcon & JSXBase.HTMLAttributes<HTMLWIconElement>;
            "w-input-checkbox": LocalJSX.WInputCheckbox & JSXBase.HTMLAttributes<HTMLWInputCheckboxElement>;
            "w-input-date": LocalJSX.WInputDate & JSXBase.HTMLAttributes<HTMLWInputDateElement>;
            "w-input-select": LocalJSX.WInputSelect & JSXBase.HTMLAttributes<HTMLWInputSelectElement>;
            "w-input-select-option": LocalJSX.WInputSelectOption & JSXBase.HTMLAttributes<HTMLWInputSelectOptionElement>;
            "w-input-text": LocalJSX.WInputText & JSXBase.HTMLAttributes<HTMLWInputTextElement>;
            "w-logo": LocalJSX.WLogo & JSXBase.HTMLAttributes<HTMLWLogoElement>;
            "w-modal": LocalJSX.WModal & JSXBase.HTMLAttributes<HTMLWModalElement>;
            "w-revision-select": LocalJSX.WRevisionSelect & JSXBase.HTMLAttributes<HTMLWRevisionSelectElement>;
            "w-router-outlet": LocalJSX.WRouterOutlet & JSXBase.HTMLAttributes<HTMLWRouterOutletElement>;
            "w-serp-certificate": LocalJSX.WSerpCertificate & JSXBase.HTMLAttributes<HTMLWSerpCertificateElement>;
            "w-version-view": LocalJSX.WVersionView & JSXBase.HTMLAttributes<HTMLWVersionViewElement>;
        }
    }
}
