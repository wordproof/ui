/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface WButton {
        /**
          * button html "disabled" attribute
         */
        "disabled": boolean;
        /**
          * renders button as underlined text
         */
        "outline": boolean;
        /**
          * button text size
         */
        "size": 'xs' | 'sm' | 'base' | 'lg' | 'xl';
        /**
          * renders button as underlined text
         */
        "text": boolean;
        /**
          * button html "type" attribute
         */
        "type": string;
    }
    interface WCertificate {
        /**
          * custom certificate link text
         */
        "linkText": string;
        /**
          * hides icon on certificate link
         */
        "noIcon": boolean;
    }
    interface WCertificateLink {
        /**
          * hides icon
         */
        "noIcon": boolean;
    }
    interface WIcon {
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit": boolean;
        /**
          * renders the icon with corresponding name
         */
        "name": string;
    }
    interface WInputText {
        /**
          * input html tag "autocomplete" attribute, defaults to ""
         */
        "autocomplete": string;
        /**
          * input html tag "autofocus" attribute, defaults to "false"
         */
        "autofocus": boolean;
        /**
          * error message displayed in the form group, defaults to ""
         */
        "error": string;
        /**
          * input html tag "inputmode" attribute, defaults to ""
         */
        "inputmode": string;
        /**
          * label for the form group, defaults to ""
         */
        "label": string;
        /**
          * input html tag "placeholder" attribute, if not set defaults to "label" prop value
         */
        "placeholder": string;
        /**
          * input html tag "required" attribute, defaults to "false"
         */
        "required": boolean;
        /**
          * a regex string (new RegExp is creted from this string) that is stripped from input value (replaced with an empty string) could be used to strip protocol and route from an URL to get website name for example strip="^http[s]?:\/\/" will strip out the protocol from an URL and strip="^http[s]?:\/\/|\/$|\.examplemaindomain.com.*" will leave subdomain value only. combined with suffix=".examplemaindomain.com" will allow to get website name without protocol and any route, query etc.
         */
        "strip": string;
        /**
          * a string displayed inside input form field group as appended label and added to visible input value could be used to get from user an URL in a specific domain for example somesubdomain[.examplemaindomain.com]
         */
        "suffix": string;
        /**
          * input html tag "type" attribute, defaults to "text"
         */
        "type": string;
        /**
          * value, defaults to ""
         */
        "value": string;
    }
    interface WLogo {
        /**
          * sets the logo colors to blue on white
         */
        "blueOnWhite": boolean;
        /**
          * sets the logo colors to blue on white
         */
        "tealOnWhite": boolean;
        /**
          * sets the logo colors to blue on white
         */
        "whiteOnBlue": boolean;
    }
    interface WModal {
        /**
          * controls visibility of the modal
         */
        "visible": boolean;
    }
}
declare global {
    interface HTMLWButtonElement extends Components.WButton, HTMLStencilElement {
    }
    var HTMLWButtonElement: {
        prototype: HTMLWButtonElement;
        new (): HTMLWButtonElement;
    };
    interface HTMLWCertificateElement extends Components.WCertificate, HTMLStencilElement {
    }
    var HTMLWCertificateElement: {
        prototype: HTMLWCertificateElement;
        new (): HTMLWCertificateElement;
    };
    interface HTMLWCertificateLinkElement extends Components.WCertificateLink, HTMLStencilElement {
    }
    var HTMLWCertificateLinkElement: {
        prototype: HTMLWCertificateLinkElement;
        new (): HTMLWCertificateLinkElement;
    };
    interface HTMLWIconElement extends Components.WIcon, HTMLStencilElement {
    }
    var HTMLWIconElement: {
        prototype: HTMLWIconElement;
        new (): HTMLWIconElement;
    };
    interface HTMLWInputTextElement extends Components.WInputText, HTMLStencilElement {
    }
    var HTMLWInputTextElement: {
        prototype: HTMLWInputTextElement;
        new (): HTMLWInputTextElement;
    };
    interface HTMLWLogoElement extends Components.WLogo, HTMLStencilElement {
    }
    var HTMLWLogoElement: {
        prototype: HTMLWLogoElement;
        new (): HTMLWLogoElement;
    };
    interface HTMLWModalElement extends Components.WModal, HTMLStencilElement {
    }
    var HTMLWModalElement: {
        prototype: HTMLWModalElement;
        new (): HTMLWModalElement;
    };
    interface HTMLElementTagNameMap {
        "w-button": HTMLWButtonElement;
        "w-certificate": HTMLWCertificateElement;
        "w-certificate-link": HTMLWCertificateLinkElement;
        "w-icon": HTMLWIconElement;
        "w-input-text": HTMLWInputTextElement;
        "w-logo": HTMLWLogoElement;
        "w-modal": HTMLWModalElement;
    }
}
declare namespace LocalJSX {
    interface WButton {
        /**
          * button html "disabled" attribute
         */
        "disabled"?: boolean;
        /**
          * renders button as underlined text
         */
        "outline"?: boolean;
        /**
          * button text size
         */
        "size"?: 'xs' | 'sm' | 'base' | 'lg' | 'xl';
        /**
          * renders button as underlined text
         */
        "text"?: boolean;
        /**
          * button html "type" attribute
         */
        "type"?: string;
    }
    interface WCertificate {
        /**
          * custom certificate link text
         */
        "linkText"?: string;
        /**
          * hides icon on certificate link
         */
        "noIcon"?: boolean;
    }
    interface WCertificateLink {
        /**
          * hides icon
         */
        "noIcon"?: boolean;
    }
    interface WIcon {
        /**
          * icon will try to fit into the available space maintainig aspect ratio
         */
        "fit"?: boolean;
        /**
          * renders the icon with corresponding name
         */
        "name"?: string;
    }
    interface WInputText {
        /**
          * input html tag "autocomplete" attribute, defaults to ""
         */
        "autocomplete"?: string;
        /**
          * input html tag "autofocus" attribute, defaults to "false"
         */
        "autofocus"?: boolean;
        /**
          * error message displayed in the form group, defaults to ""
         */
        "error"?: string;
        /**
          * input html tag "inputmode" attribute, defaults to ""
         */
        "inputmode"?: string;
        /**
          * label for the form group, defaults to ""
         */
        "label"?: string;
        "onChange"?: (event: CustomEvent<string>) => void;
        "onInput"?: (event: CustomEvent<string>) => void;
        /**
          * input html tag "placeholder" attribute, if not set defaults to "label" prop value
         */
        "placeholder"?: string;
        /**
          * input html tag "required" attribute, defaults to "false"
         */
        "required"?: boolean;
        /**
          * a regex string (new RegExp is creted from this string) that is stripped from input value (replaced with an empty string) could be used to strip protocol and route from an URL to get website name for example strip="^http[s]?:\/\/" will strip out the protocol from an URL and strip="^http[s]?:\/\/|\/$|\.examplemaindomain.com.*" will leave subdomain value only. combined with suffix=".examplemaindomain.com" will allow to get website name without protocol and any route, query etc.
         */
        "strip"?: string;
        /**
          * a string displayed inside input form field group as appended label and added to visible input value could be used to get from user an URL in a specific domain for example somesubdomain[.examplemaindomain.com]
         */
        "suffix"?: string;
        /**
          * input html tag "type" attribute, defaults to "text"
         */
        "type"?: string;
        /**
          * value, defaults to ""
         */
        "value"?: string;
    }
    interface WLogo {
        /**
          * sets the logo colors to blue on white
         */
        "blueOnWhite"?: boolean;
        /**
          * sets the logo colors to blue on white
         */
        "tealOnWhite"?: boolean;
        /**
          * sets the logo colors to blue on white
         */
        "whiteOnBlue"?: boolean;
    }
    interface WModal {
        "onClose"?: (event: CustomEvent<any>) => void;
        /**
          * controls visibility of the modal
         */
        "visible"?: boolean;
    }
    interface IntrinsicElements {
        "w-button": WButton;
        "w-certificate": WCertificate;
        "w-certificate-link": WCertificateLink;
        "w-icon": WIcon;
        "w-input-text": WInputText;
        "w-logo": WLogo;
        "w-modal": WModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "w-button": LocalJSX.WButton & JSXBase.HTMLAttributes<HTMLWButtonElement>;
            "w-certificate": LocalJSX.WCertificate & JSXBase.HTMLAttributes<HTMLWCertificateElement>;
            "w-certificate-link": LocalJSX.WCertificateLink & JSXBase.HTMLAttributes<HTMLWCertificateLinkElement>;
            "w-icon": LocalJSX.WIcon & JSXBase.HTMLAttributes<HTMLWIconElement>;
            "w-input-text": LocalJSX.WInputText & JSXBase.HTMLAttributes<HTMLWInputTextElement>;
            "w-logo": LocalJSX.WLogo & JSXBase.HTMLAttributes<HTMLWLogoElement>;
            "w-modal": LocalJSX.WModal & JSXBase.HTMLAttributes<HTMLWModalElement>;
        }
    }
}
